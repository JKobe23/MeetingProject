// <auto-generated />
using System;
using MeetingInfrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeetingInfrastructure.Migrations
{
    [DbContext(typeof(MeetingsContext))]
    [Migration("20230117145247_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeMeeting", b =>
                {
                    b.Property<int>("employeesID")
                        .HasColumnType("int");

                    b.Property<int>("meetingsId")
                        .HasColumnType("int");

                    b.HasKey("employeesID", "meetingsId");

                    b.HasIndex("meetingsId");

                    b.ToTable("EmployeeMeeting");
                });

            modelBuilder.Entity("MeetingCore.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("positionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EntityID");

                    b.HasIndex("positionID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MeetingCore.Models.Entity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("MeetingCore.Models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("refNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("MeetingCore.Models.Position", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("MeetingCore.Models.Subject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("decision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("MeetingSubject", b =>
                {
                    b.Property<int>("meetingsId")
                        .HasColumnType("int");

                    b.Property<int>("subjectsID")
                        .HasColumnType("int");

                    b.HasKey("meetingsId", "subjectsID");

                    b.HasIndex("subjectsID");

                    b.ToTable("MeetingSubject");
                });

            modelBuilder.Entity("EmployeeMeeting", b =>
                {
                    b.HasOne("MeetingCore.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("employeesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetingCore.Models.Meeting", null)
                        .WithMany()
                        .HasForeignKey("meetingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingCore.Models.Employee", b =>
                {
                    b.HasOne("MeetingCore.Models.Entity", "Entity")
                        .WithMany("Employees")
                        .HasForeignKey("EntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetingCore.Models.Position", "position")
                        .WithMany("employees")
                        .HasForeignKey("positionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("position");
                });

            modelBuilder.Entity("MeetingSubject", b =>
                {
                    b.HasOne("MeetingCore.Models.Meeting", null)
                        .WithMany()
                        .HasForeignKey("meetingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetingCore.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("subjectsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingCore.Models.Entity", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MeetingCore.Models.Position", b =>
                {
                    b.Navigation("employees");
                });
#pragma warning restore 612, 618
        }
    }
}
